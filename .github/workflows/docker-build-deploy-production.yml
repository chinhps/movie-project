name: Docker Image && Deploy Production CI/CD

on:
  push:
    branches: ["main"]

jobs:
  docker:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Docker Login
        uses: docker/login-action@v3.3.0
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_ACCESSTOKEN }}

      - name: Docker Setup Buildx
        uses: docker/setup-buildx-action@v3.6.1
        id: buildx

      # - name: Cache Docker layers
      #   uses: actions/cache@v4.0.2
      #   with:
      #     path: /tmp/.buildx-cache
      #     key: ${{ runner.os }}-buildx-${{ github.sha }}
      #     restore-keys: |
      #       ${{ runner.os }}-buildx-

      - name: Check for changes in api-movie-project
        id: changes_api_movie_project
        run: |
          if git diff --quiet origin/main HEAD ./api-movie-project; then
            echo "no changes" && echo "changed=false" >> $GITHUB_ENV;
          else
            echo "changes detected" && echo "changed=true" >> $GITHUB_ENV;
          fi

      - name: Build and push Docker movie-laravel-backend image
        if: env.changed == 'true'
        uses: docker/build-push-action@v6.7.0
        id: docker_laravel_build
        with:
          context: ./api-movie-project
          file: ./api-movie-project/prod.Dockerfile
          builder: ${{ steps.buildx.outputs.name }}
          push: true
          platforms: linux/amd64,linux/arm64
          tags: ${{ secrets.DOCKER_USERNAME }}/movie-api-laravel:latest
          # cache-from: type=local,src=/tmp/.buildx-cache
          # cache-to: type=local,dest=/tmp/.buildx-cache

      - name: Build and push Docker nginx-movie-laravel-backend image
        if: env.changed == 'true'
        uses: docker/build-push-action@v6.7.0
        id: docker_nginx_laravel_build
        with:
          context: ./api-movie-project
          file: ./api-movie-project/nginx.Dockerfile
          builder: ${{ steps.buildx.outputs.name }}
          push: true
          platforms: linux/amd64,linux/arm64
          tags: ${{ secrets.DOCKER_USERNAME }}/movie-nginx-laravel:latest
          # cache-from: type=local,src=/tmp/.buildx-cache
          # cache-to: type=local,dest=/tmp/.buildx-cache

      - name: Check for changes in server-m3u8
        id: changes_docker_media_server_build
        run: |
          if git diff --quiet origin/main HEAD ./server-m3u8; then
            echo "no changes" && echo "changed=false" >> $GITHUB_ENV;
          else
            echo "changes detected" && echo "changed=true" >> $GITHUB_ENV;
          fi

      - name: Build and push Docker movie-media-server image
        if: env.changed == 'true'
        uses: docker/build-push-action@v6.7.0
        id: docker_media_server_build
        with:
          context: ./server-m3u8
          file: ./server-m3u8/Dockerfile
          builder: ${{ steps.buildx.outputs.name }}
          push: true
          platforms: linux/amd64,linux/arm64
          tags: ${{ secrets.DOCKER_USERNAME }}/movie-media-server:latest
          # cache-from: type=local,src=/tmp/.buildx-cache
          # cache-to: type=local,dest=/tmp/.buildx-cache

      - name: Build and push Docker nginx-media-server image
        if: env.changed == 'true'
        uses: docker/build-push-action@v6.7.0
        id: docker_nginx_media_server_build
        with:
          context: ./server-m3u8
          file: ./server-m3u8/nginx.Dockerfile
          builder: ${{ steps.buildx.outputs.name }}
          push: true
          platforms: linux/amd64,linux/arm64
          tags: ${{ secrets.DOCKER_USERNAME }}/movie-nginx-media-server:latest
          # cache-from: type=local,src=/tmp/.buildx-cache
          # cache-to: type=local,dest=/tmp/.buildx-cache
          
      - name: Check for changes in movie-project
        id: changes_docker_movie_nextjs_frontend
        run: |
          if git diff --quiet origin/main HEAD ./movie-project; then
            echo "no changes" && echo "changed=false" >> $GITHUB_ENV;
          else
            echo "changes detected" && echo "changed=true" >> $GITHUB_ENV;
          fi

      - name: Build and push Docker movie-nextjs-fronted image
        if: env.changed == 'true'
        uses: docker/build-push-action@v6.7.0
        id: docker_movie_nextjs_frontend
        with:
          context: ./movie-project
          file: ./movie-project/prod.Dockerfile
          builder: ${{ steps.buildx.outputs.name }}
          push: true
          platforms: linux/amd64,linux/arm64
          tags: ${{ secrets.DOCKER_USERNAME }}/movie-nextjs-fronted:latest
          # cache-from: type=local,src=/tmp/.buildx-cache
          # cache-to: type=local,dest=/tmp/.buildx-cache

      - name: Verify
        run: |
          echo ${{ steps.docker_laravel_build.outputs.digest }} \
          && echo ${{ steps.docker_nginx_laravel_build.outputs.digest }} \
          && echo ${{ steps.docker_media_server_build.outputs.digest }} \
          && echo ${{ steps.docker_nginx_media_server_build.outputs.digest }} \
          && echo ${{ steps.docker_movie_nextjs_frontend.outputs.digest }}

  prebuild-container:
    runs-on: ubuntu-latest
    needs: docker
    steps:
      - name: Setup SSH
        uses: webfactory/ssh-agent@v0.9.0
        with:
          ssh-private-key: ${{ secrets.SSH_PRIVATE_KEY }}

      - name: Pull new code
        run: |
          ssh -o StrictHostKeyChecking=no ${{ secrets.SSH_USER }}@${{ secrets.SSH_SERVER }} 'cd /home/admin/Websites/movie-project && git pull'

      - name: Down&Remove container
        run: |
          ssh -o StrictHostKeyChecking=no ${{ secrets.SSH_USER }}@${{ secrets.SSH_SERVER }} 'cd /home/admin/Websites/movie-project && docker-compose --env-file .env.docker -f docker-compose.prod.yml down'

      # - name: Remove old images in group
      #   run: |
      #     ssh -o StrictHostKeyChecking=no ${{ secrets.SSH_USER }}@${{ secrets.SSH_SERVER }} 'images=$(docker images --filter "label=group=movie-image" -q) && [ -n "$images" ] && docker rmi $images || echo "No images found with label 'group=movie-image'"'

      - name: Pull new image in dockerhub
        run: |
          ssh -o StrictHostKeyChecking=no ${{ secrets.SSH_USER }}@${{ secrets.SSH_SERVER }} 'images=$(docker images --filter "label=group=movie-image" -q) && for image in $images; do image_name=$(docker inspect --format='{{.RepoTags}}' $image | tr -d '[]'); docker pull $image_name; done || echo "No images found with label 'group=movie-image'"'

      - name: Re-build in server
        run: |
          ssh -o StrictHostKeyChecking=no ${{ secrets.SSH_USER }}@${{ secrets.SSH_SERVER }} 'cd /home/admin/Websites/movie-project && docker-compose --env-file .env.docker -f docker-compose.prod.yml build --no-cache'

      - name: Up container
        run: |
          ssh -o StrictHostKeyChecking=no ${{ secrets.SSH_USER }}@${{ secrets.SSH_SERVER }} 'cd /home/admin/Websites/movie-project && docker-compose --env-file .env.docker -f docker-compose.prod.yml up -d'
